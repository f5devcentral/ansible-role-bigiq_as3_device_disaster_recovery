---
- name: Get machineId of the device
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/resolver/device-groups/cm-adccore-allbigipDevices/devices?$filter=address%20eq%20'{{ current_as3_target }}...{{ current_as3_target }}'"
    method: GET
    timeout: "{{ timeout }}"
    validate_certs: "{{ provider.validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: json_response

- name: Get the machineId of the specified BIG-IP
  set_fact:
    machine_id: "{{ json_response | json_query(query) | join(' ') }}"
  vars: 
    query: "json.items[?address=='{{ current_as3_target }}'].machineId"

- name: Get ALL app services name (configSetName) in the device specified {{ current_as3_target }}
  uri:
    url: https://{{ provider.server }}:{{ provider.server_port }}/mgmt/cm/global/config-sets?$filter=deviceReference.link%20eq%20'https://localhost/mgmt/shared/resolver/device-groups/cm-bigip-allBigIpDevices/devices/{{ machine_id }}'
    method: GET
    timeout: "{{ timeout }}"
    validate_certs: "{{ provider.validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
    status_code: 200, 202
  register: json_response

- name: Get ALL config-sets for {{ current_as3_target }}
  set_fact:
    configSets: "{{ json_response | json_query(query) }}"
  vars: 
    query: "json.items[*]"

- name: Get configSetName and applicationReference in config-sets
  debug:
    msg: "{{ item4.configSetName }} located in {{ item4.applicationReference }} (Global app reference)"
  with_items: "{{ configSets }}"
  loop_control:
    loop_var: item4

##### Backup configSets
- name: Check that the {{ dir_as3 }}/{{ provider.server }}.json exists
  stat:
    path: "{{ dir_as3 }}/{{ provider.server }}_bigiq_configSets.json"
  register: file_exist_all_configSets

- name: Backup the file is it exist already 
  copy:
    src: "{{ dir_as3 }}/{{ provider.server }}_bigiq_configSets.json"
    dest: "{{ dir_as3 }}/{{ provider.server }}_bigiq_configSets.json.bkp.{{ ansible_date_time.iso8601 }}"
  when: file_exist_all_configSets.stat.exists

- name: Save output in a file of all configSets for the device current_as3_target
  local_action: copy content={{ configSets | to_nice_json }} dest="{{ dir_as3 }}/{{ provider.server }}_bigiq_configSets.json"
  when: not file_exist_all_configSets.stat.exists

### Backup Legacy App details (if any)
- name: Get ALL legacy app services name (configSetName) in the device specified {{ current_as3_target }}
  uri:
    url: https://{{ provider.server }}:{{ provider.server_port }}/mgmt/cm/global/classic-configs?$filter=machineId%20eq%20'{{ machine_id }}'
    method: GET
    timeout: "{{ timeout }}"
    validate_certs: "{{ provider.validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
    status_code: 200, 202
  register: json_response

- name: Get ALL classic-configs for {{ current_as3_target }}
  set_fact:
    classicConfigs: "{{ json_response | json_query(query) }}"
  vars: 
    query: "json.items[*]"

- name: Get classicConfigs and applicationReference in config-sets
  debug:
    msg: "{{ item5.name }} located in {{ item5.currentConfigVirtualServerReferences }} (VIP reference)"
  with_items: "{{ classicConfigs }}"
  loop_control:
    loop_var: item5

##### Backup classicConfigs
- name: Check that the {{ dir_as3 }}/{{ provider.server }}.json exists
  stat:
    path: "{{ dir_as3 }}/{{ provider.server }}_bigiq_classicConfigs.json"
  register: file_exist_all_classicConfigs

- name: Backup the file is it exist already 
  copy:
    src: "{{ dir_as3 }}/{{ provider.server }}_bigiq_classicConfigs.json"
    dest: "{{ dir_as3 }}/{{ provider.server }}_bigiq_classicConfigs.json.bkp.{{ ansible_date_time.iso8601 }}"
  when: file_exist_all_classicConfigs.stat.exists

- name: Save output in a file of all classicConfigs for the device current_as3_target
  local_action: copy content={{ classicConfigs | to_nice_json }} dest="{{ dir_as3 }}/{{ provider.server }}_bigiq_classicConfigs.json"
  when: not file_exist_all_classicConfigs.stat.exists