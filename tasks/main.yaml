---
- name: Setup provider and varables
  set_fact:
    provider: "{{ provider }}"

- fail: msg="The variable 'device_username' is not defined"
  when: device_username is undefined

- fail: msg="The variable 'device_password' is not defined"
  when: device_password is undefined

- fail: msg="The variable 'dir_as3' is not defined"
  when: dir_as3 is undefined

- fail: msg="The variable 'current_as3_target' is not defined"
  when: current_as3_target is undefined

- fail: msg="The variable 'new_as3_target' is not defined"
  when: new_as3_target is undefined

- name: Install Galaxy roles and conditions
  include_tasks: install-galaxy-roles-collections.yml

- name: Get authentication token
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/authn/login"
    method: POST
    timeout: "{{ timeout }}"
    validate_certs: "{{ provider.validate_certs }}"
    body:
      username: "{{ provider.user }}"
      password: "{{ provider.password }}"
      loginProviderName: "{{ provider.auth_provider | default('tmos') }}"
    body_format: json
  register: authtoken

- name: Set the token fact if authentication succeeded
  set_fact:
    f5_auth_token: "{{ authtoken.json.token.token }}"
  when: authtoken is success

- name: Test authentication
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/echo"
    timeout: "{{ timeout }}"
    validate_certs: "{{ provider.validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: status

- name: Get device provisioning type
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/cm/system/provisioning"
    timeout: "{{ timeout }}"
    validate_certs: "{{ provider.validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: rprov

- name: Fail if you're running the role against a DCD device
  fail:
    msg: "This role should be run against a CM device, but you appear to be running it against a DCD device"
  when: rprov.json.systemPersonality == 'logging_node'

- name: Check if system is setup
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/system/setup"
    timeout: "{{ timeout }}"
    validate_certs: "{{ provider.validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: setupchk

- name: Stop if the system is not setup
  fail:
    msg: "The CM device has not been setup. Please onboard the DCD device first."
  when: setupchk.json.isSystemSetup is not defined or not setupchk.json.isSystemSetup|bool

- name: Confirm Proceed
  pause:
    prompt: "\nConfirm the RMA device {{ current_as3_target }} was replaced and fully functioning.\n
             \nSteps executed by the role:
             \n1. Backup AS3 declarations from RMA device {{ current_as3_target }} 
             \n2. Delete the AS3 application services on BIG-IQ dashboard (apps won't be deleted on the BIG-IP but only on BIG-IQ)
             \n3. Remove the RMA device {{ current_as3_target }} from BIG-IQ
             \n4. Add back the RMA device {{ current_as3_target }} in BIG-IQ
             \n5. Re-deploy the AS3 application services on the new target device {{ new_as3_target }} (no service impact)\n
             \nNote: All app services custom roles will be removed in BIG-IQ.
             \nYou will need to manually re-assign those to the users (if any assinged to it) after the role is completed.
             \n\nDo you want to proceed? (yes/no)"
  register: confirm_proceed

- fail:
    msg: "Please, Replace & Restore RMA device {{ current_as3_target }} before using this role."
  when:  not confirm_proceed.user_input | bool

- name: Check both devices are part of the same BIG-IP cluster in BIG-IQ so all referenced objects and AS3 declarations are sync between the 2 devices
  include_tasks: "check-bigip-in-same-cluster.yaml"
  when: not standalone

#1. Backup AS3 declarations from RMA device {{ current_as3_target }} 
- name: Step 1 - Backup device's AS3 declarations
  include_tasks: "backup-as3-apps.yaml"

- name: Get app services details to cleanup
  include_tasks: "get-apps-details.yaml"

#2. Delete the AS3 application services on BIG-IQ dashboard (apps won't be deleted on the BIG-IP but only on BIG-IQ)
- name: Step 2 - Force-Delete Application Services
  block:
  - name: Force-Delete Application Services in {{ current_as3_target }}
    include_tasks: "force-delete-apps-RMA-device.yaml"
    with_items: "{{ configSets }}"
    loop_control:
      loop_var: item1
  rescue:
  # BIQPROJ-26703
  - name: Unpin slCertReferences and sslKeyReferences LTM objects from {{ current_as3_target }} and {{ new_as3_target }} 
    include_tasks: "delete-bigiq-pinned-objects-RMA-device.yaml"
    # After un-pin those objects, force-delete should work on remaining AS3 app
  - name: Force-Delete Application Services in {{ current_as3_target }}
    include_tasks: "force-delete-apps-RMA-device.yaml"
    with_items: "{{ configSets }}"
    loop_control:
      loop_var: item1
  when: confirm_proceed.user_input | bool

# 3. and 4. Remove and Add the RMA device {{ current_as3_target }} from BIG-IQ
- name: Step 3 and 4 Remove and Add the RMA device {{ current_as3_target }} from BIG-IQ
  include_tasks: "bigiq_device_discovery.yaml"

# 5. Re-deploy the AS3 application services on the new target device {{ current_as3_target }} (no service impact)

# Post AS3 declaration to new device using atc_deploy
- name: ATC POST - create new {{ new_as3_target }}
  include_role:
    name: f5devcentral.atc_deploy
  vars:
    atc_service: AS3
    atc_method: POST
    atc_declaration_file: "{{ dir_as3 }}/{{ new_as3_target }}_bigip.json"
    atc_delay: 30
    atc_retries: 30
  register: atc_AS3_status
  ignore_errors: yes

# Backup mapping app services location in BIG-IQ App dashboard
- name: Check that the {{ dir_as3 }}/{{ provider.server }}_bigiq_apps_mapping.json exists
  stat:
    path: "{{ dir_as3 }}/{{ provider.server }}_bigiq_apps_mapping.json"
  register: file_exist_apps

- name: Backup the bigiq_apps_mapping file is it exist already 
  copy:
    src: "{{ dir_as3 }}/{{ provider.server }}_bigiq_apps_mapping.json"
    dest: "{{ dir_as3 }}/{{ provider.server }}_bigiq_apps_mapping.json.bkp.{{ ansible_date_time.iso8601 }}"
  when: file_exist_apps.stat.exists

- name: Delete File {{ dir_as3 }}/{{ provider.server }}_bigiq_apps_mapping.json if it exists
  file:
    state: absent
    path: "{{ dir_as3 }}/{{ provider.server }}_bigiq_apps_mapping.json"
  when: file_exist_apps.stat.exists

# - name: Service Catalog and Legacy App service use cases
#   include_tasks: "service-catalog-and-legacy-apps.yaml"
#   with_items: "{{ configSets }}"
#   loop_control:
#     loop_var: item2

- name: Move AS3 application service(s) in BIG-IQ application dashboard.
  include_tasks: "move-app-services.yaml"
  with_items: "{{ configSets }}"
  loop_control:
    loop_var: item3

## SHOW any service catalog template or legacy apps removed which needs to be re-created manually
- name: Service Catalog or Legacy App Services removed which needs to be re-created manually on the BIG-IQ.
  debug:
    msg:
      - "{{ sc_legacy_apps }}"
