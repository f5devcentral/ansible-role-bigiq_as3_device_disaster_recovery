---
- name: Setup provider and varables
  set_fact:
    provider: "{{ provider }}"

- name: Get authentication token
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/authn/login"
    method: POST
    timeout: "{{ timeout }}"
    validate_certs: "{{ validate_certs }}"
    body:
      username: "{{ provider.user }}"
      password: "{{ provider.password }}"
      loginProviderName: "{{ provider.loginProviderName }}"
    body_format: json
  register: authtoken

- name: Set the token fact if authentication succeeded
  set_fact:
    f5_auth_token: "{{ authtoken.json.token.token }}"
  when: authtoken is success

- name: Test authentication
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/echo"
    timeout: "{{ timeout }}"
    validate_certs: "{{ validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: status

- name: Get device provisioning type
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/cm/system/provisioning"
    timeout: "{{ timeout }}"
    validate_certs: "{{ validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: rprov

- name: Fail if you're running the role against a DCD device
  fail:
    msg: "This role should be run against a CM device, but you appear to be running it against a DCD device"
  when: rprov.json.systemPersonality == 'logging_node'

- name: Check if system is setup
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/system/setup"
    timeout: "{{ timeout }}"
    validate_certs: "{{ validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: setupchk

- name: Stop if the system is not setup
  fail:
    msg: "The CM device has not been setup. Please onboard the DCD device first."
  when: setupchk.json.isSystemSetup is not defined or not setupchk.json.isSystemSetup|bool

- name: Check both devices are part of the same BIG-IP cluster in BIG-IQ so all referenced objects and AS3 declarations are sync between the 2 devices
  include_tasks: "check-bigip-in-same-cluster.yaml"
  when: not standalone

- name: Confirm proceed if RMA device is standalone
  pause:
    prompt: "\n- Confirm the RMA device {{ current_as3_target }} has been replaced and USC backup restored.
             \n\nDo you want to proceed? (yes/no)"
  register: confirm_standalone
  when: 
    - standalone

- fail:
    msg: "Please, replace & restore RMA device before using this role."
  when: 
    - standalone
    - not confirm_standalone.user_input | bool

- name: Backup device's AS3 declarations
  include_tasks: "backup-as3.yaml"

- name: Get app services details to cleanup
  include_tasks: "cleanup-get-apps-details.yaml"

- name: Step 1 - Confirm Apps deletion from current_as3_target
  pause:
    prompt: "\n- Confirm the RMA device is {{ current_as3_target }} and {{ new_as3_target }} device ready to be used.
             \n- All AS3 application services using {{ current_as3_target }} from BIG-IQ dashboard will be deleted.
             \n (apps won't be deleted on the BIG-IP but only on BIG-IQ)
             \n\nDo you want to proceed? (yes/no)"
  register: confirm_proceed

- fail:
    msg: "Please, delete first the Apps on BIG-IQ dashboard."
  when:  not confirm_proceed.user_input | bool

- name: Force-Delete Application Services in {{ current_as3_target }}
  include_tasks: "cleanup-apps-unreachable.yaml"
  with_items: "{{ configSets }}"
  loop_control:
    loop_var: item1
  when: confirm_proceed.user_input | bool

- name: Make a backup file of {{ dir_as3 }}/{{ new_as3_target }}
  copy:
    src: "{{ dir_as3 }}/{{ new_as3_target }}.json"
    dest: "{{ dir_as3 }}/{{ new_as3_target }}.json.bkp.{{ ansible_date_time.iso8601 }}"
  when: 
    - standalone
    - confirm_proceed.user_input | bool

- name: Confirm proceed if RMA device is standalone
  pause:
    prompt: "\n- Now, remove {{ current_as3_target }} from BIG-IQ and add it back (discover & import {{ new_as3_target }}).
             \n (a backup of the original AS3 declaration from RMA device has been saved in 
             \n{{ dir_as3 }}/{{ new_as3_target }}.json.bkp.{{ ansible_date_time.iso8601 }}).
             \n\nHit any key to continue"
  when: 
    - standalone
    - confirm_proceed.user_input | bool

- name: Step 2 - Confirm Apps deployment to the new_as3_target - Standalone
  pause:
    prompt: "\n- Confirm the device {{ new_as3_target }} is the correct new target device.
             \n- This step will redeploy the AS3 application services to the new target {{ new_as3_target }} (no service impact).
             \n\nHit any key to continue"
  register: ignore_confirm

# Post AS3 declaration to new device using atc_deploy
- name: ATC POST - create new {{ new_as3_target }}
  include_role:
    name: f5devcentral.atc_deploy
  vars:
    atc_service: AS3
    atc_method: POST
    atc_declaration_file: "{{ dir_as3 }}/{{ new_as3_target }}.json"
    atc_delay: 15
    atc_retries: 30
  register: atc_AS3_status
  when: confirm_proceed.user_input | bool

- name: Move AS3 application service(s) in BIG-IQ application dashboard.
  include_tasks: "move-app-services.yaml"
  with_items: "{{ configSets }}"
  loop_control:
    loop_var: item2
  when: confirm_proceed.user_input | bool

- name: Next steps...
  debug:
    msg: 
      - "Actions to perform before or after the role is used (depending on when the RMA device was replaced):"
      - "Once the AS3 application services have been re-deployed to the {{ new_as3_target }}, you can now remove the RMA device {{ current_as3_target }} from BIG-IQ (remove all services first)."
      - "Once {{ current_as3_target }} is removed from BIG-IQ, you can add it back after the device has been replaced and USC backup restored."
      - "Make sure you add it to the existing BIG-IP cluster in BIG-IQ if this device was part of a Active-Standby HA pair."
  when: confirm_proceed.user_input | bool
